version: 0.2

env:
  variables:
    AWS_ACCOUNT_ID: "581483106272"  # Utilisez un seul ID de compte cohérent
    AWS_REGION: "eu-north-1"
    REPO_BACKEND: "581483106272.dkr.ecr.eu-north-1.amazonaws.com/pfe-backend"
    REPO_FRONTEND: "581483106272.dkr.ecr.eu-north-1.amazonaws.com/pfe-frontend"
    REPO_NGINX: "581483106272.dkr.ecr.eu-north-1.amazonaws.com/pfe-nginx"



phases:
  pre_build:
    commands:
      - echo Login to ECR
      - aws --version
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:-latest}
      - echo "Tag des images:$IMAGE_TAG"

      - echo "=== Vérification des outils de build ==="
      - java -version
      - mvn --version
      - node --version
      - npm --version

      - echo "=== Pré-téléchargement des dépendances Maven ==="
      - cd backend/
      - mvn dependency:resolve -q || echo "Échec du téléchargement des dépendances"
      - cd ..

  build:
    commands:
      - echo "=== Vérification de la structure du projet ==="
      - ls -la
      - echo "=== Contenu du répertoire backend ==="
      - ls -la backend/

      - echo "=== Build backend ==="
      - cd backend
      - echo "Répertoire courant:" && pwd
      - echo "Contenu du répertoire backend:"
      - ls -la

      - echo "=== Vérification du fichier pom.xml ==="
      - if [ -f pom.xml ]; then echo "pom.xml trouvé"; cat pom.xml; else echo "pom.xml MANQUANT"; fi

      - echo "=== Version de Maven ==="
      - mvn --version

      - echo "=== Compilation Maven simple ==="
      - mvn --quiet install

      - echo "=== Vérification des artifacts générés ==="
      - ls -la target/
      - cd ..

      - echo "=== Build image backend ==="
      - cd backend
      - docker build -f Dockerfile -t $REPO_BACKEND:latest .
      - docker tag $REPO_BACKEND:latest $REPO_BACKEND:$IMAGE_TAG
      - cd ..

      - echo "=== Build frontend ==="
      - cd frontend
      - npm install
      - npm run build --configuration production
      - cd ..

      - echo "=== Build image frontend ==="
      - cd frontend
      - docker build -f Dockerfile -t $REPO_FRONTEND:latest frontend/
      - docker tag $REPO_FRONTEND:latest $REPO_FRONTEND:$IMAGE_TAG
      - cd ..

      - echo "=== Build image nginx ==="
      - cd nginx
      - docker build -f Dockerfile -t $REPO_NGINX:latest nginx/
      - docker tag $REPO_NGINX:latest $REPO_NGINX:$IMAGE_TAG
      - cd ..

  post_build:
    commands:
      - echo Pushing images to ECR
      - docker images
      - docker push $REPO_BACKEND:latest
      - docker push $REPO_BACKEND:$IMAGE_TAG
      - docker push $REPO_FRONTEND:latest
      - docker push $REPO_FRONTEND:$IMAGE_TAG
      - docker push $REPO_NGINX:latest
      - docker push $REPO_NGINX:$IMAGE_TAG

      - echo Generating imagedefinitions.json
      - printf '[{"name":"pfeapplicationcontainer","imageUri":"%s"},{"name":"frontendcontainer","imageUri":"%s"},{"name":"nginxcontainer","imageUri":"%s"}]' \
        "$REPO_BACKEND:$IMAGE_TAG" "$REPO_FRONTEND:$IMAGE_TAG" "$REPO_NGINX:$IMAGE_TAG" > imagedefinitions.json

artifacts:
  files:
    - imagedefinitions.json